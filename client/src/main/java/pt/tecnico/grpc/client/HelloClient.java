package pt.tecnico.grpc.client;

/* these imported classes are generated by the hello-world-server contract */
import pt.tecnico.grpc.HelloWorld;
import pt.tecnico.grpc.HelloWorldServiceGrpc;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.Status;
import io.grpc.StatusRuntimeException;
import java.util.concurrent.TimeUnit;


public class HelloClient {

	public static void main(String[] args) throws Exception {
		System.out.println(HelloClient.class.getSimpleName());

		// receive and print arguments
		System.out.printf("Received %d arguments%n", args.length);
		for (int i = 0; i < args.length; i++) {
			System.out.printf("arg[%d] = %s%n", i, args[i]);
		}

		// check arguments
		if (args.length < 2) {
			System.err.println("Argument(s) missing!");
			System.err.printf("Usage: java %s host port%n", HelloClient.class.getName());
			return;
		}

		final String host = args[0];
		final int port = Integer.parseInt(args[1]);
		final String target = host + ":" + port;

		// Channel is the abstraction to connect to a service endpoint
		// Let us use plaintext communication because we do not have certificates
		final ManagedChannel channel = ManagedChannelBuilder.forTarget(target).usePlaintext().build();

		// It is up to the client to determine whether to block the call
		// Here we create a blocking stub, but an async stub,
		// or an async stub with Future are always possible.
		HelloWorldServiceGrpc.HelloWorldServiceBlockingStub stub = HelloWorldServiceGrpc.newBlockingStub(channel);
		HelloWorld.HelloRequest request = HelloWorld.HelloRequest.newBuilder().setName("friend").build();
		HelloWorld.HelloResponse response;
		try{
			// Finally, make the call using the stub with timeout of 2 seconds
			response = stub.withDeadlineAfter(2000, TimeUnit.MILLISECONDS).greeting(request);
			
		}catch(StatusRuntimeException e){
			// If the timeout time has expired, stop the client
			if(Status.DEADLINE_EXCEEDED.getCode() == e.getStatus().getCode())
				System.out.println("The cause was a timeout exception. ");
				channel.shutdownNow();
				return;

		}

		System.out.println("No timeout!");

		// HelloResponse has auto-generated toString method that shows its contents
		System.out.println(response);

		// A Channel should be shutdown before stopping the process.
		channel.shutdownNow();
	}

}
